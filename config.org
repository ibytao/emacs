#+TITLE: Emacs Configuration
#+AUTHOR: Buck
#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setCJKmainfont{STHeitiSC-Light}
* theme
#+BEGIN_SRC emacs-lisp
  ;;
  ;;theme setup
  ;;
  (set-face-attribute 'default nil :font "-apple-Monaco-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1")
  ;; (set-face-attribute 'default nil :font "-*-Inconsolata Awesome-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1")
  ;; (set-face-attribute 'default nil :font "-apple-Menlo-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1")
  ;; (set-face-attribute 'default nil :font "-apple-inconsolata-medium-r-normal--14-*-*-*-*-*-iso10646-1")
  ;; (set-face-attribute 'default nil :font "-*-Hack-normal-normal-normal-*-13-*-*-*-m-0-iso10646-1")
  ;; (set-face-attribute 'default nil :font "-outline-Consolas-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1")
  ;; (set-face-attribute 'default nil :font "-*-Operator Mono-normal-italic-normal-*-16-*-*-*-m-0-iso10646-1")
  ;; (set-face-attribute 'default nil :font "-*-Operator Mono-normal-normal-normal-*-16-*-*-*-m-0-iso10646-1")
  ;; Setting English Font
  ;; (set-face-attribute 'default nil :font "Operator Mono Book 16")
  (add-hook 'prog-mode-hook (lambda ()
                              ;; (set-face-attribute 'default nil :font "-outline-Consolas-normal-normal-normal-*-14-*-*-*-m-0-iso10646-1")
                              ;; (set-face-attribute 'default nil :font "Operator Mono Book 17")
                              (set-face-attribute 'default nil :font "-apple-Monaco-medium-normal-normal-*-13-*-*-*-m-0-iso10646-1")
                              ))

  (add-hook 'org-mode-hook (lambda ()
                             (set-face-attribute
                              'default nil
                              :font (font-spec :name "-*-Monaco-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1"
                                               :weight 'normal
                                               :slant 'normal
                                               :size 14))
                             (dolist (charset '(kana han symbol cjk-misc bopomofo))
                               (set-fontset-font
                                (frame-parameter nil 'font)
                                charset
                                (font-spec :name "-*-Hiragino Sans GB-normal-normal-normal-*-*-*-*-*-p-0-iso10646-1"
                                           :weight 'normal
                                           :slant 'normal
                                           :size 16.0)))
                             ))

  (use-package solarized-theme
    :ensure t
    :init
    ;; make the fringe stand out from the background
    ;; (setq solarized-distinct-fringe-background t)

    ;; Don't change the font for some headings and titles
    (setq solarized-use-variable-pitch nil)

    ;; make the modeline high contrast
    (setq solarized-high-contrast-mode-line t)

    ;; Use less bolding
    ;; (setq solarized-use-less-bold t)

    ;; Use more italics
    ;; (setq solarized-use-more-italic t)

    ;; Use less colors for indicators such as git:gutter, flycheck and similar
    (setq solarized-emphasize-indicators nil)

    ;; Don't change size of org-mode headlines (but keep other size-changes)
    (setq solarized-scale-org-headlines nil)
    (setq solarized-scale-outline-headlines nil)

    (setq x-underline-at-descent-line t)

    (mapc
     (lambda (face)
       (set-face-attribute face nil :weight 'normal :underline nil))
     (face-list))

    (load-theme 'solarized-dark t)

    (custom-set-faces
     ;; '(company-preview
     ;;   ((t (:foreground "#859900" :underline t))))
     ;; '(company-preview-common
     ;;   ((t (:inherit company-preview))))
     ;; '(company-tooltip
     ;;   ((t (:background "lightgray" :foreground "black"))))
     '(company-tooltip-selection
       ((t (:background "#1b3d4a" :foreground "#859900"))))
     '(company-tooltip-common
       ((((type x)) (:inherit company-tooltip :weight bold))
        (t (:inherit company-tooltip))))
     '(company-tooltip-common-selection
       ((((type x)) (:inherit company-tooltip-selection :weight bold))
        (t (:inherit company-tooltip-selection)))))
    )

  ;; (load-theme 'seti t)

  (use-package solarized-theme
    :ensure t
    :init
    ;; make the fringe stand out from the background
    ;; (setq solarized-distinct-fringe-background t)

    ;; Don't change the font for some headings and titles
    (setq solarized-use-variable-pitch nil)

    ;; make the modeline high contrast
    (setq solarized-high-contrast-mode-line t)

    ;; Use less bolding
    ;; (setq solarized-use-less-bold t)

    ;; Use more italics
    ;; (setq solarized-use-more-italic t)

    ;; Use less colors for indicators such as git:gutter, flycheck and similar
    (setq solarized-emphasize-indicators nil)

    ;; Don't change size of org-mode headlines (but keep other size-changes)
    (setq solarized-scale-org-headlines nil)
    (setq solarized-scale-outline-headlines nil)

    (setq x-underline-at-descent-line t)

    (mapc
     (lambda (face)
       (set-face-attribute face nil :weight 'normal :underline nil))
     (face-list))

    (load-theme 'solarized-dark t)
    (custom-set-faces
     ;; '(company-preview
     ;;   ((t (:foreground "#859900" :underline t))))
     ;; '(company-preview-common
     ;;   ((t (:inherit company-preview))))
     ;; '(company-tooltip
     ;;   ((t (:background "lightgray" :foreground "black"))))

     '(company-tooltip-selection
       ((t (:background "#1b3d4a" :foreground "#859900"))))
     '(company-tooltip-common
       ((((type x)) (:inherit company-tooltip :weight bold))
        (t (:inherit company-tooltip))))
     '(company-tooltip-common-selection
       ((((type x)) (:inherit company-tooltip-selection :weight bold))
        (t (:inherit company-tooltip-selection)))))
    )

  ;; (use-package atom-one-dark-theme
  ;;   :ensure t
  ;;   )

  ;; (use-package zenburn-theme
  ;;   :ensure t)

  ;; (use-package doom-themes
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'doom-solarized-light)
  ;;   )

  ;; (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/emacs-color-theme-solarized")
  ;; (load-theme 'solarized-dark t)

  (add-to-list 'default-frame-alist
               '(ns-transparent-titlebar . t))
  ;; or dark - depending on your theme
  (add-to-list 'default-frame-alist
               '(ns-appearance . dark))
  ;; (setq ns-use-proxy-icon nil) (setq frame-title-format nil)
#+END_SRC
* spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (spaceline-spacemacs-theme)
  )
#+END_SRC
* spaceline-all-the-icons
 #+BEGIN_SRC emacs-lisp
   (use-package spaceline-all-the-icons
     :ensure t
     :after spaceline
     :config
     (spaceline-all-the-icons-theme)
     (spaceline-toggle-all-the-icons-minor-modes)
     ;; (spaceline-toggle-all-the-icons-dedicated)
     (spaceline-toggle-all-the-icons-projectile-on)
     (spaceline-toggle-all-the-icons-multiple-cursors)
     (spaceline-toggle-all-the-icons-bookmark)

     (setq spaceline-all-the-icons-flycheck-alternate t)
     ;;(setq spaceline-all-the-icons-icon-set-modified 'toggle)
     ;; 'slant, 'arrow, 'cup, 'wave, 'none
     (setq spaceline-all-the-icons-separator-type 'slant)
     (setq spaceline-all-the-icons-slim-render t)

     (spaceline-toggle-all-the-icons-fullscreen)
     (spaceline-toggle-all-the-icons-buffer-position)
     (spaceline-toggle-all-the-icons-hud-on)
     (spaceline-toggle-global-on)

     ;; (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
     ;; (set-face-attribute 'spaceline-evil-emacs nil :background "#be84ff")
     ;; (set-face-attribute 'spaceline-evil-insert nil :background "#5fd7ff")
     ;; (set-face-attribute 'spaceline-evil-motion nil :background "#ae81ff")
     ;; (set-face-attribute 'spaceline-evil-normal nil :background "#a6e22e")
     ;; (set-face-attribute 'spaceline-evil-replace nil :background "#f92672")
     ;; (set-face-attribute 'spaceline-evil-visual nil :background "#fd971f")

     (custom-set-faces '(spaceline-highlight-face ((t (:background "#a6e22e" :foreground "#3E3D31" :inherit (quote mode-line))))))
     )
 #+END_SRC
* smex
#+BEGIN_SRC emacs-lisp
  ;;
  ;;smex
  ;;
  (use-package smex
    :ensure t
    :init
    (smex-initialize)
    :bind (("M-x" . 'smex))
    )
#+END_SRC
* expand-region
#+BEGIN_SRC emacs-lisp
  ;;
  ;;expand-region
  ;;
  (use-package expand-region
    :ensure t
    :bind
    (("C-=" . 'er/expand-region))
    (("C-+" . 'er/contract-region))
    :config
    (pending-delete-mode t)
    )
#+END_SRC
* change-inner
#+BEGIN_SRC emacs-lisp
  (use-package change-inner
    :ensure t
    :bind
    (("M-I" . 'change-inner))
    (("M-O" . 'change-outer))
    (("s-i" . 'copy-inner))
    (("s-o" . 'copy-outer))
    )
#+END_SRC
* multiple-cursors
#+BEGIN_SRC emacs-lisp
  ;;
  ;; multiple cursors
  ;;
  (use-package multiple-cursors
    :ensure t
    :bind (
           ;; ("M-3" . mc/mark-next-like-this)
           ;; ("M-4" . mc/mark-previous-like-this)
           ;; ("C-;" . mc/mark-all-dwim)
           )
    :init
    (global-unset-key (kbd "M-<down-mouse-1>"))
    (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)
    ;; (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-M->") 'mc/skip-to-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-M-<") 'mc/skip-to-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    )
#+END_SRC
* iy-go-to-char
#+BEGIN_SRC emacs-lisp
  (use-package iy-go-to-char
    :ensure t
    :config
    (global-set-key (kbd "C-c f") 'iy-go-to-char)
    (global-set-key (kbd "C-c F") 'iy-go-to-char-backward)
    (global-set-key (kbd "C-c ;") 'iy-go-to-or-up-to-continue)
    (global-set-key (kbd "C-c ,") 'iy-go-to-or-up-to-continue-backward)
    )
#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
  ;; (use-package avy
  ;;   :ensure t)
#+END_SRC
* ace-jump-mode
#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :ensure t
    :init
    ;; you can select the key you prefer to
    (global-unset-key (kbd "s-j"))
    (global-set-key (kbd "s-j") 'ace-jump-mode)
    (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)  
    )
#+END_SRC
* ace-isearch
#+BEGIN_SRC emacs-lisp
  (use-package ace-isearch
    :ensure t
    :config
    ;; (setq ace-isearch-jump-delay 0.4)
    ;; (global-ace-isearch-mode +1)
    )
#+END_SRC
* ivy
#+BEGIN_SRC emacs-lisp
  ;;
  ;;ivy
  ;;
  (use-package ivy
    :ensure t
    )
#+END_SRC
* swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    ;; (global-unset-key (kbd "s-p"))
    ;; (global-set-key (kbd "s-p") 'swiper)
    )
#+END_SRC
* recentf
 #+BEGIN_SRC emacs-lisp
    ;;
   ;;recentf
   ;;
   (use-package recentf
     :ensure t
     :config
     (recentf-mode 1)
     (setq recentf-max-saved-items 1000)
     (defun recentf-ido-find-file ()
       "Use `ido-completing-read' to find a recent file."
       (interactive)
       (if (find-file (ido-completing-read "Find recent file: " recentf-list))
           (message "Opening file...")
         (message "Aborting")))
     (global-unset-key (kbd "s-f"))
     (global-set-key (kbd "s-f") 'recentf-ido-find-file)
     ;; (global-set-key (kbd "C-x f") 'recentf-ido-find-file)
     )
 #+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
;;
;; yasnippet
;;
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode)
  (use-package yasnippet-snippets :ensure t)
  )
#+END_SRC
* osx-dictionary
#+BEGIN_SRC emacs-lisp
;;
;;osx-dictionary
;;
(use-package osx-dictionary
  :ensure t
  :bind
  (("C-c t" . 'osx-dictionary-search-pointer))
  )
#+END_SRC
* perspective
#+BEGIN_SRC emacs-lisp
  ;;
  ;;perspective
  ;;
  (use-package perspective
    :ensure t
    :config
    (when (display-graphic-p)
      (setq persp-nil-name (all-the-icons-octicon "dash" :height 0.9 :v-adjust 0.0))
      ;; (custom-set-variables
      ;;  '(persp-auto-resume-time -1)
      ;;  '(persp-auto-save-opt 0)
      ;;  )
      (persp-mode +1))
    )
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
  ;;
  ;;projectile
  ;;
  (use-package projectile
    :ensure t
    :config
    (projectile-mode t)
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (setq projectile-completion-system 'ivy)
    (setq projectile-globally-ignored-files '( "TAGS" ".DS_Store" ))
    )
#+END_SRC
* prodigy
#+BEGIN_SRC emacs-lisp
  (use-package prodigy
    :ensure t
    :config
    (prodigy-define-service
      :name "jiedianqian-statics"
      :command "npm"
      :args '("run" "dev")
      :cwd "~/Workspace/jiedianqian-statics")

    (prodigy-define-service
      :name "m-full-stack"
      :command "npm"
      :args '("run" "server:dev")
      :cwd "~/Workspace/m-full-stack")
    (prodigy-define-service
      :name "cms"
      :command "grunt"
      :args '("serve")
      :cwd "~/Workspace/CMS")
  )
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
  ;;
  ;;flycheck
  ;;
  (use-package flycheck
    :ensure t
    :config
     ;;set eslint
      (defun my/use-eslint-from-node-modules ()
        (let* ((root (locate-dominating-file
                      (or (buffer-file-name) default-directory)
                      "node_modules"))
               (eslint (and root
                            (expand-file-name "node_modules/eslint/bin/eslint.js"
                                              root))))
          (when (and eslint (file-executable-p eslint))
            (setq-local flycheck-javascript-eslint-executable eslint))))
      (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
      (add-hook 'web-mode-hook #'my/use-eslint-from-node-modules)
      (add-hook 'go-mode-hook (lambda () (flycheck-mode t)))
  )
#+END_SRC
* smartparens
#+BEGIN_SRC emacs-lisp
  ;;
  ;;smartparens-config
  ;;
  (use-package smartparens
    :ensure t
    :config
    (smartparens-global-mode t)
    (add-hook 'org-mode-hook (lambda () (smartparens-mode -1)))
    (add-hook 'clojure-mode-hook (lambda () (smartparens-mode -1)))
    (add-hook 'emacs-lisp-mode-hook (lambda () (smartparens-mode -1)))
    (add-hook 'cider-repl-mode-hook (lambda () (smartparens-mode -1)))
    )
#+END_SRC
* paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (add-hook 'clojure-mode-hook 'paredit-mode)
    (add-hook 'cider-repl-mode-hook 'paredit-mode)
    (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
    ;; Enable `paredit-mode' in the minibuffer, during `eval-expression'.
    ;; (defun conditionally-enable-paredit-mode
    ;;   (if (eq this-command 'eval-expression)
    ;;       (paredit-mode 1)))

    ;; (add-hook 'minibuffer-setup-hook 'conditionally-enable-paredit-mode)
    )
#+END_SRC
* fill-column-indicator
#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :ensure t
    :config
    (fci-mode t)
    (setq fci-rule-color "#111122")
    ;; Lines should be 80 characters wide, not 72
    ;; (setq fill-column 80)

    ;; 80 chars is a good width.
    ;; (set-default 'fill-column 80)

    ;; Don't break lines for me, please
    (setq-default truncate-lines t)
    )
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  ;;
  ;;magit
  ;;
  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-x m") 'magit)
    )
#+END_SRC
* guide-key
#+BEGIN_SRC emacs-lisp
;;
;;guide-key
;;
(use-package guide-key
  :ensure t
  :config
  (guide-key-mode 1)
  (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-x v" "C-x 8" "C-x +" "C-c RET"))
  (setq guide-key/recursive-key-sequence-flag t)
  (setq guide-key/popup-window-position 'bottom)
  )
#+END_SRC
* company
#+BEGIN_SRC emacs-lisp
  ;;
  ;;company
  ;;
  (use-package company
    :ensure t
    :config
    (global-company-mode t)
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1)
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous))

    ;; (add-hook 'css-mode-hook (lambda ()
    ;;                            (add-to-list (make-local-variable 'company-backends) 'company-css)))

    (add-hook 'emacs-lisp-mode-hook (lambda ()
                                      (add-to-list (make-local-variable 'company-backends) 'company-elisp)))

  
    )
#+END_SRC
* org
#+BEGIN_SRC emacs-lisp
  ;;
  ;;org
  ;;
  ;; org-mode colors
  ;; (setq org-todo-keyword-faces
  ;;       '(
  ;;         ("INPR" . (:foreground "yellow" :weight bold))
  ;;         ("DONE" . (:foreground "green" :weight bold))
  ;;         ("IMPEDED" . (:foreground "red" :weight bold))
  ;;         ))

  (setq org-todo-keywords '((sequence "☛ TODO(t)" "|" "✔ DONE(d)")
                            (sequence "⚑ WAITING(w)" "|")
                            (sequence "|" "✘ CANCELED(c)")))

  (setq org-publish-project-alist
        '(("org-notes"
           :base-directory "~/Dropbox/org/"
           :publishing-directory "~/Dropbox/public_html/"
           :publishing-function org-twbs-publish-to-html
           :with-sub-superscript nil
           )))
  (setq org-agenda-files '("~/Dropbox/todo"))

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))
    (setq org-hide-leading-stars t)
    (setq org-ellipsis "⤵") ;; ⤵ ↴ ⬎ ⤷
    (set-face-attribute 'org-ellipsis nil :underline nil)
    (setq org-log-done 'time)
    )

  (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
  (setq org-cycle-separator-lines 1)

  ;; (setq org-hide-emphasis-markers t)

  (let* ((variable-tuple
          (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                ((x-list-fonts "Verdana")         '(:font "Verdana"))
                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight normal :foreground ,base-font-color)))

  (custom-theme-set-faces
   'user
   `(org-level-8 ((t (,@headline ,@variable-tuple))))
   `(org-level-7 ((t (,@headline ,@variable-tuple))))
   `(org-level-6 ((t (,@headline ,@variable-tuple))))
   `(org-level-5 ((t (,@headline ,@variable-tuple))))
   `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.1))))
   `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil))))))

  (custom-theme-set-faces
   'user
   '(org-block                 ((t (:inherit fixed-pitch))))
   '(org-document-info         ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-link                  ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line             ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value        ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim              ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent                ((t (:inherit (org-hide fixed-pitch))))))

  (use-package ox-latex
    :config
    (progn
      (defvar modi/ox-latex-use-minted t
        "Use `minted' package for listings.")
      (setq org-latex-compiler "xelatex") ; introduced in org 9.0
      (setq org-latex-prefer-user-labels t) ; org-mode version 8.3+
      ;; Previewing latex fragments in org mode
      ;; http://orgmode.org/worg/org-tutorials/org-latex-preview.html
      ;; (setq org-latex-create-formula-image-program 'dvipng) ; NOT Recommended
      (setq org-latex-create-formula-image-program 'imagemagick) ; Recommended
      (with-eval-after-load 'ox-latex
        (add-to-list 'org-latex-classes
        ;; beamer class, for presentations
        '("beamer"
           "\\documentclass[12pt]{beamer}\n
            \\usepackage{xeCJK}\n
            \\setCJKmainfont{STHeitiSC-Light}\n
            \\mode<{{{beamermode}}}>\n
            \\usetheme{{{{beamertheme}}}}\n
            \\usecolortheme{{{{beamercolortheme}}}}\n
            \\beamertemplateballitem\n
            \\setbeameroption{show notes}
            \\usepackage[utf8]{inputenc}\n
            \\usepackage[T1]{fontenc}\n
            \\usepackage{hyperref}\n
            \\usepackage{color}
            \\usepackage{listings}
            \\lstset{numbers=none,language=[ISO]C++,tabsize=4,frame=single,basicstyle=\\small,showspaces=false,showstringspaces=false,showtabs=false,keywordstyle=\\color{blue}\\bfseries,commentstyle=\\color{red},}\n
            \\usepackage{verbatim}\n
            \\institute{{{{beamerinstitute}}}}\n
             \\subject{{{{beamersubject}}}}\n"
           ("\\section{%s}" . "\\section*{%s}")
           ("\\begin{frame}[fragile]\\frametitle{%s}"
             "\\end{frame}"
             "\\begin{frame}[fragile]\\frametitle{%s}"
             "\\end{frame}"))))
          ;; Run xelatex multiple times to get the cross-references right
          (setq org-latex-pdf-process '("xelatex -shell-escape %f"
                                        "xelatex -shell-escape %f"
                                        "xelatex -shell-escape %f"))))
#+END_SRC
* clojure
#+BEGIN_SRC emacs-lisp
  ;;
  ;;clojure
  ;;
  (use-package clojure-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.clj$" . clojure-mode))
    (add-to-list 'auto-mode-alist '("\\.cljs$" . clojurescript-mode))
    (add-to-list 'auto-mode-alist '("\\.cljc$" . clojurec-mode))
    )
#+END_SRC
* clj-refactor
#+BEGIN_SRC emacs-lisp
  ;;
  ;;clj-refactor
  ;;
  (use-package clj-refactor
    :ensure t
    :config
    (defun my-clojure-mode-hook ()
      (clj-refactor-mode 1)
      (yas-minor-mode 1) ; for adding require/use/import statements
      ;; This choice of keybinding leaves cider-macroexpand-1 unbound
      (cljr-add-keybindings-with-prefix "C-c C-m"))

    (add-hook 'clojure-mode-hook #'my-clojure-mode-hook)
    )
#+END_SRC
* web-mode
#+BEGIN_SRC emacs-lisp
  ;;
  ;;web-mode
  ;;
  (use-package web-mode
         :ensure t
         :config
         (add-to-list 'auto-mode-alist '("\\.vue$" . web-mode))
         (add-hook 'web-mode-hook
                   (lambda ()
                     ;; (yas-activate-extra-mode 'web-mode)
                     ;; (web-mode-set-content-type "jsx")
                     (flycheck-mode 1)
                     ;; disable jshint since we prefer eslint checking
                     ;; (setq-default flycheck-disabled-checkers
                     ;;               (append flycheck-disabled-checkers
                     ;;                       '(javascript-jshint)))
                     ;; use eslint with web-mode for jsx files
                     (flycheck-add-mode 'javascript-eslint 'web-mode)
                     ;; (lsp-vue-enable)
                     (setq web-mode-style-padding 0)
                     (setq web-mode-script-padding 0)
                     ;; (message "now set to: %s" web-mode-content-type)
                     ))
         )
#+END_SRC
* emmet
#+BEGIN_SRC emacs-lisp
;;
;;emmet
;;
(use-package emmet-mode
  :ensure t
  :config
  (setq emmet-indentation 2)
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)
  (add-hook 'web-mode-hook 'emmet-mode))
#+END_SRC
* js2-mode
#+BEGIN_SRC emacs-lisp
  ;;
  ;;js2-mode
  ;;
  (use-package js2-mode
    :ensure t
    :config
    (setq-default js2-allow-rhino-new-expr-initializer nil)
    (setq-default js2-auto-indent-p nil)
    (setq-default js2-enter-indents-newline nil)
    (setq-default js2-global-externs '("module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON"))
    (setq-default js2-idle-timer-delay 0.1)
    (setq-default js2-indent-on-enter-key nil)
    (setq-default js2-mirror-mode nil)
    (setq-default js2-strict-inconsistent-return-warning nil)
    (setq-default js2-auto-indent-p t)
    (setq-default js2-include-rhino-externs nil)
    (setq-default js2-include-gears-externs nil)
    (setq-default js2-concat-multiline-strings 'eol)
    (setq-default js2-rebind-eol-bol-keys nil)

    ;; Let flycheck handle parse errors
    (setq-default js2-show-parse-errors nil)
    (setq-default js2-strict-missing-semi-warning nil)
    (setq-default js2-strict-trailing-comma-warning nil) ;; jshint does not warn about this now for some reason
    (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode)))
#+END_SRC
* tern
#+BEGIN_SRC emacs-lisp
;;
;;tern
;;
(use-package tern
  :ensure t
  :config
  (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
  (setq tern-command '("tern" "--no-port-file" "--persistent"))
  )
#+END_SRC
* company-tern
#+BEGIN_SRC emacs-lisp
;;
;;company-tern
;;
(use-package company-tern
  :ensure t
  :config
  (add-hook 'js-mode-hook
                (lambda ()
                  (add-to-list 'company-backends 'company-tern)))

      (add-hook 'web-mode-hook
                (lambda ()
                  (push '(company-css company-tern) company-backends)))
      )
#+END_SRC
* sbcl
  #+begin_src emacs-lisp
    (use-package slime
      :ensure t
      :init
      (setq inferior-lisp-program "/usr/local/homebrew/bin/sbcl")
      :config
      (slime-setup))
  #+end_src
* Flymake-google-cpplint
  #+BEGIN_SRC emacs-lisp
    (use-package flymake-google-cpplint
      :ensure t
      :config
      (defun my:flymake-google-init ()
        (require 'flymake-google-cpplint)
        (custom-set-variables
         '(flymake-google-cpplint-command "/usr/local/bin/cpplint"))
        (flymake-google-cpplint-load)
        )
      (add-hook 'c-mode-hook 'my:flymake-google-init)
      (add-hook 'c++-mode-hook 'my:flymake-google-init)
      )
  #+END_SRC
* Google-c-style
  #+BEGIN_SRC emacs-lisp
    (use-package google-c-style
      :ensure t
      :config
      (add-hook 'c-mode-common-hook 'google-set-c-style)
      (add-hook 'c-mode-common-hook 'google-make-newline-indent))
  #+END_SRC
* Company-c-headers
  #+BEGIN_SRC emacs-lisp
    (use-package company-c-headers
      :ensure t
      :config
      (add-to-list 'company-c-headers-path-system "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1/"))
  #+END_SRC
* Irony
  #+BEGIN_SRC emacs-lisp
    (use-package irony
      :ensure t
      :config
      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'objc-mode-hook 'irony-mode)
      ;;replace the 'completion-at-point' and 'complete-symbol' bindings in
      ;;irony-mode's buffers by irony-mode's function
      (defun my-irony-mode-hook ()
        (define-key irony-mode-map [remap completion-at-point]
          'irony-completion-at-point-async)
        (define-key irony-mode-map [remap complete-symbol]
          'irony-completion-at-point-async))
      (add-hook 'irony-mode-hook 'my-irony-mode-hook)
      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
  #+END_SRC
* Company-irony-c-headers
  #+BEGIN_SRC emacs-lisp
    (use-package company-irony
      :ensure t
      :config
      (use-package company-irony-c-headers
        :ensure t
        :config
        (defun my-c-c++-mode-hook()
          (company-mode)
          (eval-after-load 'company
            '(add-to-list 'company-backends '(company-c-headers company-irony-c-headers company-irony company-etags)))
          )
        (add-hook 'c-mode-hook 'my-c-c++-mode-hook)
        (add-hook 'c++-mode-hook 'my-c-c++-mode-hook)
        (add-hook 'objc-mode-hook 'my-c-c++-mode-hook))
      )
  #+END_SRC
* Java
  #+BEGIN_SRC emacs-lisp
    ;; https://github.com/mopemope/meghanada-emacs
    (use-package rainbow-delimiters :ensure t)
    (use-package meghanada
      :ensure t
      :defer t
      :init
      (add-hook 'java-mode-hook
                (lambda ()
                  (setq c-basic-offset 2)
                  ;; (gradle-mode 1)
                  (google-set-c-style)
                  (google-make-newline-indent)
                  (meghanada-mode t)
                  (rainbow-delimiters-mode t)
                  (highlight-symbol-mode t)
                  (eval-after-load 'company
                    '(add-to-list 'company-backends '(company-meghanada)))
                  (add-hook 'before-save-hook 'meghanada-code-beautify-before-save))))
  #+END_SRC
* groovy
#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode
    :ensure t
   )
#+END_SRC
* python
  #+begin_src emacs-lisp
    (setq python-shell-completion-native-enable nil)
    ;; (use-package company-jedi
    ;;   :ensure t
    ;;   :config
    ;;   (add-hook 'python-mode-hook 'jedi:setup)
    ;;   (add-hook 'python-mode-hook (lambda ()
    ;;                                 (add-to-list 'company-backends 'company-jedi)))
    ;;   )

    (use-package elpy
      :commands (elpy-enable)
      :config
      (setq elpy-rpc-backend "jedi")
      ;; For elpy
      ;; (setq elpy-rpc-python-command "python3")
      ;; For interactive shell
      ;; (setq python-shell-interpreter "python3")
      ;; (add-hook 'python-mode-hook
      ;;           (lambda ()
      ;;             (smartparens-mode t)
      ;;             (use-package pyvenv
      ;;               :config
      ;;               (pyvenv-activate "~/projects/virtual-env/"))
      ;;             ))
      )

  #+end_src
* php
  #+begin_src emacs-lisp
    (use-package php-mode
      :ensure t
      :mode "[^.][^t][^p][^l]\\.php$"
      ;; :bind (("m-." . ac-php-find-symbol-at-point)
      ;;        ("m-," . ac-php-location-stack-back))
      :config
      (eval-after-load 'php-mode
        '(require 'php-ext))
      (define-key php-mode-map  (kbd "m-.") 'ac-php-find-symbol-at-point)   ;goto define
      (define-key php-mode-map  (kbd "m-,") 'ac-php-location-stack-back)    ;go back
      (add-hook 'php-mode-hook
                '(lambda ()
                   ;; (paredit-mode t)
                   (setq-default tab-width 4)
                   (setq c-basic-offset 4)
                   (require 'company-php)
                   (company-mode t)
                   (ac-php-core-eldoc-setup) ;; enable eldoc
                   (make-local-variable 'company-backends)
                   (add-to-list 'company-backends 'company-ac-php-backend)))
      (setq php-file-patterns nil)
      ;; (add-to-list 'auto-mode-alist '("[^.][^t][^p][^l]\\.php$" . php-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl.php$" . html-mode))
      (eval-after-load "php-mode" '(define-key php-mode-map (kbd "C-.") nil))
    )
  #+end_src
* sbcl
  #+begin_src emacs-lisp
    (use-package slime
      :ensure t
      :init
      (setq inferior-lisp-program "/usr/local/homebrew/bin/sbcl")
      :config
      (slime-setup))
  #+end_src
* email
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (add-to-list 'load-path "/usr/local/Cellar/mu/1.0/share/emacs/site-lisp/mu/mu4e"))

  (require 'mu4e)
  ;; Use mu4e as default mail agent
  (setq mail-user-agent 'mu4e-user-agent)
  ;; Mail folder set to ~/Maildir
  (setq mu4e-maildir "~/Mail/exmail")         ; NOTE: should not be symbolic link
  ;; Fetch mail by offlineimap
  ;; (setq mu4e-get-mail-command "offlineimap")
  (setq mu4e-get-mail-command "mbsync exmail")
  ;; Fetch mail in 60 sec interval
  (setq mu4e-update-interval 60)

  ;; folder for sent messages
  ;; (setq mu4e-sent-folder   "/Outbox")
  ;; unfinished messages
  ;; (setq mu4e-drafts-folder "/DraftBox")
  ;; trashed messages
  ;; (setq mu4e-trash-folder  "/Trash")
  ;; saved messages
  ;; (setq mu4e-trash-folder  "/Archive")

  (setq mu4e-hide-index-messages t)

  (require 'mu4e-contrib)
  (setq mu4e-html2text-command 'mu4e-shr2text)
  ;; try to emulate some of the eww key-bindings
  (add-hook 'mu4e-view-mode-hook
            (lambda ()
              (local-set-key (kbd "<tab>") 'shr-next-link)
              (local-set-key (kbd "<backtab>") 'shr-previous-link)))

  (setq mu4e-view-show-images t)

  (global-set-key (kbd "C-c m") 'mu4e)

  ;; SMTP setup
  (setq message-send-mail-function 'smtpmail-send-it
        smtpmail-stream-type 'ssl
        starttls-use-gnutls t)
  ;; Personal info
  (setq user-full-name "bangyao, Tao")          ; FIXME: add your info here
  (setq user-mail-address "taoby@xysl.com"); FIXME: add your info here
  ;; mail setup
  (setq smtpmail-smtp-server "smtp.exmail.qq.com")
  (setq smtpmail-smtp-service 465)
  (setq smtpmail-smtp-user "taoby@xysl.com") ; FIXME: add your mail addr here

  (require 'org-mu4e)
  (setq org-mu4e-convert-to-html t)

  ;; this seems to fix the babel file saving thing
  (defun org~mu4e-mime-replace-images (str current-file)
    "Replace images in html files with cid links."
    (let (html-images)
      (cons
       (replace-regexp-in-string ;; replace images in html
        "src=\"\\([^\"]+\\)\""
        (lambda (text)
          (format
           "src=\"./:%s\""
           (let* ((url (and (string-match "src=\"\\([^\"]+\\)\"" text)
                            (match-string 1 text)))
                  (path (expand-file-name
                         url (file-name-directory current-file)))
                  (ext (file-name-extension path))
                  (id (replace-regexp-in-string "[\/\\\\]" "_" path)))
             (add-to-list 'html-images
                          (org~mu4e-mime-file
                           (concat "image/" ext) path id))
             id)))
        str)
       html-images)))


  (defun mu4e-compose-org-mail ()
    (interactive)
    (mu4e-compose-new)
    (org-mu4e-compose-org-mode))

  (use-package mu4e-alert
    :ensure t
    :after mu4e
    :hook ((after-init . mu4e-alert-enable-mode-line-display)
           (after-init . mu4e-alert-enable-notifications))
    :config
    (mu4e-alert-set-default-style 'libnotify)
    ;; (mu4e-alert-set-default-style 'notifier)
    )

  ;;china
  (setenv "XAPIAN_CJK_NGRAM" "1")
#+END_SRC
* restclient
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :ensure t)
#+END_SRC
* dart
#+BEGIN_SRC emacs-lisp
  (use-package dart-mode
    :ensure t)

#+END_SRC
* cnfonts
#+BEGIN_SRC emacs-lisp
  (use-package cnfonts
    :ensure t
    :config
    ;; (cnfonts-enable)
    ;; (setq cnfonts-profiles
    ;;       '("program" "org-mode"))
    )
#+END_SRC
* rjsx
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("app\\/.*\\.js\\'" . rjsx-mode))
#+END_SRC
* reveal
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure t
    :config
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)
    )

  (use-package htmlize
    :ensure t)
#+END_SRC
* go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :mode (("\\.go\\'" . go-mode))
    :hook ((before-save . gofmt-before-save))
    :config
    (global-unset-key (kbd "S-m"))
    (setq gofmt-command "goimports")

    (use-package company-go
      :ensure t
      :config
      (add-hook 'go-mode-hook (lambda()
                                (add-to-list (make-local-variable 'company-backends)
                                             '(company-go company-files company-yasnippet company-capf))))
      )

    (use-package go-eldoc
      :ensure t
      :hook (go-mode . go-eldoc-setup)
      )
    (use-package go-guru
      :ensure t
      :hook (go-mode . go-guru-hl-identifier-mode)
      )
    (use-package go-rename
      :ensure t)

    (let ((govet (flycheck-checker-get 'go-vet 'command)))
      (when (equal (cadr govet) "tool")
        (setf (cdr govet) (cddr govet))))
    )
#+END_SRC
* pug
#+BEGIN_SRC emacs-lisp
  (use-package pug-mode
    :ensure t
    :config
    (defun pug-compile-saved-file()
      (when (and (stringp buffer-file-name)
                 (string-match "\\.pug\\'" buffer-file-name))
        (pug-compile)))
    (add-hook 'after-save-hook 'pug-compile-saved-file)
    )
#+END_SRC
